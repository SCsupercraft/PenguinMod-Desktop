name: 'publish'

on:
    workflow_dispatch:

jobs:
    publish:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: 'macos-latest' # for Arm based macs (M1 and above).
                      args: '--target aarch64-apple-darwin'
                    - platform: 'macos-latest' # for Intel based macs.
                      args: '--target x86_64-apple-darwin'
                    - platform: 'ubuntu-22.04'
                      args: ''
                    - platform: 'windows-latest'
                      args: ''

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
                  cache: 'npm' # Set this to npm, yarn or pnpm.

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
              with:
                  # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: './src-tauri -> target'

            - name: install frontend dependencies
              # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
              run: npm install # change this to npm or pnpm depending on which one you use.

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
                  releaseName: 'PenguinMod Desktop v__VERSION__'
                  releaseBody: |
                    See the assets to download this version and install.

                    Windows:
                    - PenguinMod.Desktop___VERSION___x64_en-US.msi
                    - PenguinMod.Desktop___VERSION___x64-setup.exe
                    
                    Linux:
                    - PenguinMod.Desktop___VERSION___amd64.deb
                    - PenguinMod.Desktop-__VERSION__-1.x86_64.rpm
                    - PenguinMod.Desktop___VERSION___amd64.AppImage
                    
                    MacOS (arm):
                    - PenguinMod.Desktop___VERSION___aarch64.dmg
                    - PenguinMod.Desktop_aarch64.app.tar.gz
                    
                    MacOS (x86):
                    - PenguinMod.Desktop___VERSION___x64.dmg
                    - PenguinMod.Desktop_x64.app.tar.gz
                  releaseDraft: true
                  prerelease: false
                  args: ${{ matrix.args }}
